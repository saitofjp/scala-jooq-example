/*
 * This file is generated by jOOQ.
*/
package generated.tables


import generated.Indexes
import generated.Keys
import generated.Public
import generated.tables.records.AuthorRecord

import java.lang.Class
import java.lang.Integer
import java.lang.String
import java.util.Arrays
import java.util.List

import javax.annotation.Generated

import org.jooq.Field
import org.jooq.Index
import org.jooq.Name
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.TableImpl

import scala.Array


object Author {

  /**
   * The reference instance of <code>PUBLIC.AUTHOR</code>
   */
  val AUTHOR = new Author
}

/**
 * This class is generated by jOOQ.
 */
@Generated(
  value = Array(
    "http://www.jooq.org",
    "jOOQ version:3.10.6"
  ),
  comments = "This class is generated by jOOQ"
)
class Author(alias : Name, aliased : Table[AuthorRecord], parameters : Array[ Field[_] ]) extends TableImpl[AuthorRecord](alias, Public.PUBLIC, aliased, parameters, "") {

  /**
   * The class holding records for this type
   */
  override def getRecordType : Class[AuthorRecord] = {
    classOf[AuthorRecord]
  }

  /**
   * The column <code>PUBLIC.AUTHOR.ID</code>.
   */
  val ID : TableField[AuthorRecord, Integer] = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), "")

  /**
   * The column <code>PUBLIC.AUTHOR.FIRST_NAME</code>.
   */
  val FIRST_NAME : TableField[AuthorRecord, String] = createField("FIRST_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * The column <code>PUBLIC.AUTHOR.LAST_NAME</code>.
   */
  val LAST_NAME : TableField[AuthorRecord, String] = createField("LAST_NAME", org.jooq.impl.SQLDataType.VARCHAR(255).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), "")

  /**
   * Create a <code>PUBLIC.AUTHOR</code> table reference
   */
  def this() = {
    this(DSL.name("AUTHOR"), null, null)
  }

  /**
   * Create an aliased <code>PUBLIC.AUTHOR</code> table reference
   */
  def this(alias : String) = {
    this(DSL.name(alias), generated.tables.Author.AUTHOR, null)
  }

  /**
   * Create an aliased <code>PUBLIC.AUTHOR</code> table reference
   */
  def this(alias : Name) = {
    this(alias, generated.tables.Author.AUTHOR, null)
  }

  private def this(alias : Name, aliased : Table[AuthorRecord]) = {
    this(alias, aliased, null)
  }

  override def getSchema : Schema = Public.PUBLIC

  override def getIndexes : List[ Index ] = {
    return Arrays.asList[ Index ](Indexes.PRIMARY_KEY_7)
  }

  override def getPrimaryKey : UniqueKey[AuthorRecord] = {
    Keys.CONSTRAINT_7
  }

  override def getKeys : List[ UniqueKey[AuthorRecord] ] = {
    return Arrays.asList[ UniqueKey[AuthorRecord] ](Keys.CONSTRAINT_7)
  }

  override def as(alias : String) : Author = {
    new Author(DSL.name(alias), this)
  }

  override def as(alias : Name) : Author = {
    new Author(alias, this)
  }

  /**
   * Rename this table
   */
  override def rename(name : String) : Author = {
    new Author(DSL.name(name), null)
  }

  /**
   * Rename this table
   */
  override def rename(name : Name) : Author = {
    new Author(name, null)
  }
}
